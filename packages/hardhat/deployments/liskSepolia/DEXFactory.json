{
  "address": "0xbA7b826A12658F7616392ab4654dF9161532d5be",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairCount",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPairAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4fb66d522ddd8c76170bdb8d3dd5272889f83f3a05cbc25344ca7b91d16558e5",
  "receipt": {
    "to": null,
    "from": "0x8D3777B35b6ba02E88De8fdd07982c4514A8bb65",
    "contractAddress": "0xbA7b826A12658F7616392ab4654dF9161532d5be",
    "transactionIndex": 1,
    "gasUsed": "1530188",
    "logsBloom": "0x
    "blockHash": "0x15d9f006ae6842ad805a610615142d7c82c25c0c7714b3a32ef55197db776d0f",
    "transactionHash": "0x4fb66d522ddd8c76170bdb8d3dd5272889f83f3a05cbc25344ca7b91d16558e5",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 28262016,
        "transactionHash": "0x4fb66d522ddd8c76170bdb8d3dd5272889f83f3a05cbc25344ca7b91d16558e5",
        "address": "0xbA7b826A12658F7616392ab4654dF9161532d5be",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d3777b35b6ba02e88de8fdd07982c4514a8bb65"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x15d9f006ae6842ad805a610615142d7c82c25c0c7714b3a32ef55197db776d0f"
      }
    ],
    "blockNumber": 28262016,
    "cumulativeGasUsed": "1576296",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e718c74148a40040a0d42084984afec7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairCount\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPairAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DEXFactory.sol\":\"DEXFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/DEXFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"./SimpleDEX.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract DEXFactory is Ownable {\\n    mapping(address => mapping(address => address)) public getPair;\\n    address[] public allPairs;\\n\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256 pairCount);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair) {\\n        require(tokenA != address(0) && tokenB != address(0), \\\"Invalid token address\\\");\\n        require(tokenA != tokenB, \\\"Tokens must be different\\\");\\n        require(getPair[tokenA][tokenB] == address(0), \\\"Pair already exists\\\");\\n\\n        SimpleDEX newPair = new SimpleDEX(tokenA, tokenB);\\n        pair = address(newPair);\\n\\n        getPair[tokenA][tokenB] = pair;\\n        getPair[tokenB][tokenA] = pair;\\n        allPairs.push(pair);\\n\\n        emit PairCreated(tokenA, tokenB, pair, allPairs.length);\\n    }\\n\\n    function allPairsLength() external view returns (uint256) {\\n        return allPairs.length;\\n    }\\n\\n    function getPairAt(uint256 index) external view returns (address) {\\n        return allPairs[index];\\n    }\\n}\\n\",\"keccak256\":\"0x38340998d27127496a8833b02ba2b2e50bd9711711ec2f17d1f10a0f7d2e5548\",\"license\":\"MIT\"},\"contracts/SimpleDEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\ncontract SimpleDEX is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public token0;\\n    IERC20 public token1;\\n    uint256 public reserve0;\\n    uint256 public reserve1;\\n    uint256 public totalLiquidity;\\n\\n    // Fee Distribution\\n    uint256 public accumulatedFee0;\\n    uint256 public accumulatedFee1;\\n    mapping(address => uint256) public claimedFees0;\\n    mapping(address => uint256) public claimedFees1;\\n\\n    mapping(address => uint256) public liquidity;\\n\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\n    uint256 public constant SWAP_FEE = 3; // 0.3%\\n\\n    event LiquidityAdded(address indexed provider, uint256 amount0, uint256 amount1, uint256 liquidity);\\n    event LiquidityRemoved(address indexed provider, uint256 amount0, uint256 amount1, uint256 liquidity);\\n    event Swapped(address indexed user, address indexed tokenIn, uint256 amountIn, uint256 amountOut);\\n    event FeesClaimed(address indexed user, uint256 fee0, uint256 fee1);\\n\\n    constructor(address _token0, address _token1) {\\n        token0 = IERC20(_token0);\\n        token1 = IERC20(_token1);\\n    }\\n\\n    function addLiquidity(uint256 amount0Desired, uint256 amount1Desired) external {\\n        uint256 amount0 = amount0Desired;\\n        uint256 amount1 = amount1Desired;\\n\\n        if (totalLiquidity == 0) {\\n            reserve0 = amount0;\\n            reserve1 = amount1;\\n            totalLiquidity = amount0;\\n            liquidity[msg.sender] = amount0;\\n        } else {\\n            uint256 amount1Optimal = (amount0 * reserve1) / reserve0;\\n            if (amount1Optimal <= amount1Desired) {\\n                amount1 = amount1Optimal;\\n            } else {\\n                uint256 amount0Optimal = (amount1Desired * reserve0) / reserve1;\\n                amount0 = amount0Optimal;\\n            }\\n            uint256 addedLiquidity =\\n                Math.min((amount0 * totalLiquidity) / reserve0, (amount1 * totalLiquidity) / reserve1);\\n            liquidity[msg.sender] += addedLiquidity;\\n            totalLiquidity += addedLiquidity;\\n            reserve0 += amount0;\\n            reserve1 += amount1;\\n        }\\n\\n        if (amount0 > 0) token0.safeTransferFrom(msg.sender, address(this), amount0);\\n        if (amount1 > 0) token1.safeTransferFrom(msg.sender, address(this), amount1);\\n\\n        emit LiquidityAdded(msg.sender, amount0, amount1, liquidity[msg.sender]);\\n    }\\n\\n    function removeLiquidity(uint256 liquidityAmount) external {\\n        require(liquidity[msg.sender] >= liquidityAmount, \\\"Insufficient liquidity\\\");\\n\\n        uint256 amount0 = (liquidityAmount * reserve0) / totalLiquidity;\\n        uint256 amount1 = (liquidityAmount * reserve1) / totalLiquidity;\\n\\n        liquidity[msg.sender] -= liquidityAmount;\\n        totalLiquidity -= liquidityAmount;\\n        reserve0 -= amount0;\\n        reserve1 -= amount1;\\n\\n        if (amount0 > 0) token0.safeTransfer(msg.sender, amount0);\\n        if (amount1 > 0) token1.safeTransfer(msg.sender, amount1);\\n\\n        emit LiquidityRemoved(msg.sender, amount0, amount1, liquidityAmount);\\n    }\\n\\n    function swap(address tokenIn, uint256 amountIn, uint256 amountOutMin) external {\\n        require(tokenIn == address(token0) || tokenIn == address(token1), \\\"Invalid token\\\");\\n\\n        (uint256 reserveIn, uint256 reserveOut) =\\n            tokenIn == address(token0) ? (reserve0, reserve1) : (reserve1, reserve0);\\n        require(reserveIn > 0 && reserveOut > 0, \\\"Insufficient liquidity\\\");\\n\\n        uint256 amountInWithFee = (amountIn * (FEE_DENOMINATOR - SWAP_FEE)) / FEE_DENOMINATOR;\\n        uint256 feeAmount = amountIn - amountInWithFee;\\n        uint256 amountOut = (amountInWithFee * reserveOut) / (reserveIn + amountInWithFee);\\n        require(amountOut >= amountOutMin, \\\"Insufficient output amount\\\");\\n\\n        if (tokenIn == address(token0)) {\\n            token0.safeTransferFrom(msg.sender, address(this), amountIn);\\n            accumulatedFee0 += feeAmount;\\n            reserve0 += amountInWithFee;\\n            reserve1 -= amountOut;\\n            token1.safeTransfer(msg.sender, amountOut);\\n        } else {\\n            token1.safeTransferFrom(msg.sender, address(this), amountIn);\\n            accumulatedFee1 += feeAmount;\\n            reserve1 += amountInWithFee;\\n            reserve0 -= amountOut;\\n            token0.safeTransfer(msg.sender, amountOut);\\n        }\\n\\n        emit Swapped(msg.sender, tokenIn, amountIn, amountOut);\\n    }\\n\\n    function claimFees() external {\\n        require(liquidity[msg.sender] > 0, \\\"No liquidity position\\\");\\n\\n        uint256 userShare = (liquidity[msg.sender] * 10000) / totalLiquidity;\\n        uint256 fee0 = (accumulatedFee0 * userShare) / 10000 - claimedFees0[msg.sender];\\n        uint256 fee1 = (accumulatedFee1 * userShare) / 10000 - claimedFees1[msg.sender];\\n\\n        claimedFees0[msg.sender] += fee0;\\n        claimedFees1[msg.sender] += fee1;\\n\\n        if (fee0 > 0) token0.safeTransfer(msg.sender, fee0);\\n        if (fee1 > 0) token1.safeTransfer(msg.sender, fee1);\\n\\n        emit FeesClaimed(msg.sender, fee0, fee1);\\n    }\\n\\n    function getReserves() external view returns (uint256 _reserve0, uint256 _reserve1) {\\n        return (reserve0, reserve1);\\n    }\\n\\n    function getSwapAmount(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut) {\\n        (uint256 reserveIn, uint256 reserveOut) =\\n            tokenIn == address(token0) ? (reserve0, reserve1) : (reserve1, reserve0);\\n        if (reserveIn == 0 || reserveOut == 0) return 0;\\n        uint256 amountInWithFee = (amountIn * (FEE_DENOMINATOR - SWAP_FEE)) / FEE_DENOMINATOR;\\n        amountOut = (amountInWithFee * reserveOut) / (reserveIn + amountInWithFee);\\n    }\\n\\n    function getUserLiquidity(address user) external view returns (uint256) {\\n        return liquidity[user];\\n    }\\n\\n    function getAccumulatedFees() external view returns (uint256 _fee0, uint256 _fee1) {\\n        return (accumulatedFee0, accumulatedFee1);\\n    }\\n\\n    function getClaimableFees(address user) external view returns (uint256 fee0, uint256 fee1) {\\n        if (totalLiquidity == 0) return (0, 0);\\n        uint256 userShare = (liquidity[user] * 10000) / totalLiquidity;\\n        fee0 = (accumulatedFee0 * userShare) / 10000 - claimedFees0[user];\\n        fee1 = (accumulatedFee1 * userShare) / 10000 - claimedFees1[user];\\n    }\\n}\\n\",\"keccak256\":\"0xd94e134d68171e7f2d7b130abcc717f463f0a37e2396efb7e9736e0a6d36a648\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611a428061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100eb578063c9c65396146100fc578063e6a439051461010f578063f2fde38b1461014357600080fd5b80631e3dd18b1461008d5780633d9e2edb146100bd578063574f2ba3146100d0578063715018a6146100e1575b600080fd5b6100a061009b366004610544565b610156565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a06100cb366004610544565b610180565b6002546040519081526020016100b4565b6100e96101b0565b005b6000546001600160a01b03166100a0565b6100a061010a366004610579565b6101c4565b6100a061011d366004610579565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6100e96101513660046105ac565b610414565b6002818154811061016657600080fd5b6000918252602090912001546001600160a01b0316905081565b600060028281548110610195576101956105ce565b6000918252602090912001546001600160a01b031692915050565b6101b861048d565b6101c260006104e7565b565b60006001600160a01b038316158015906101e657506001600160a01b03821615155b61022f5760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b60448201526064015b60405180910390fd5b816001600160a01b0316836001600160a01b0316036102905760405162461bcd60e51b815260206004820152601860248201527f546f6b656e73206d75737420626520646966666572656e7400000000000000006044820152606401610226565b6001600160a01b038381166000908152600160209081526040808320868516845290915290205416156102fb5760405162461bcd60e51b81526020600482015260136024820152725061697220616c72656164792065786973747360681b6044820152606401610226565b6000838360405161030b90610537565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801561033e573d6000803e3d6000fd5b506001600160a01b0385811660008181526001602081815260408084208a871680865290835281852080546001600160a01b0319908116988a1698891790915584845282862087875284528286208054821689179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180549094168717909355925483519586529085015293955085945090917f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35092915050565b61041c61048d565b6001600160a01b0381166104815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610226565b61048a816104e7565b50565b6000546001600160a01b031633146101c25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610226565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611428806105e583390190565b60006020828403121561055657600080fd5b5035919050565b80356001600160a01b038116811461057457600080fd5b919050565b6000806040838503121561058c57600080fd5b6105958361055d565b91506105a36020840161055d565b90509250929050565b6000602082840312156105be57600080fd5b6105c78261055d565b9392505050565b634e487b7160e01b600052603260045260246000fdfe608060405234801561001057600080fd5b506040516200142838038062001428833981016040819052610031916100d7565b61003a3361006b565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905561010a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100d257600080fd5b919050565b600080604083850312156100ea57600080fd5b6100f3836100bb565b9150610101602084016100bb565b90509250929050565b61130e806200011a6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638da5cb5b116100c3578063c68f368c1161007c578063c68f368c146102c8578063d21220a7146102d1578063d294f093146102e4578063d73792a9146102ec578063dbbdd935146102f5578063f2fde38b1461031e57600080fd5b80638da5cb5b146102555780639c8f9f23146102665780639cd441da146102795780639f1d0f591461028c578063b02cb8de1461029f578063b8c876b1146102a857600080fd5b80635a76f25e116101155780635a76f25e146101fc5780635df45a37146102055780636a6f66e614610210578063715018a614610223578063768aebde1461022d5780638ba601181461023557600080fd5b80630902f1ac1461015d5780630dfe16811461017e57806315770f92146101a95780631befa6db146101c0578063274f8127146101d3578063443cb4bc146101f3575b600080fd5b6003546004545b604080519283526020830191909152015b60405180910390f35b600154610191906001600160a01b031681565b6040516001600160a01b039091168152602001610175565b6101b260055481565b604051908152602001610175565b6101b26101ce36600461111b565b610331565b6101b26101e1366004611145565b60086020526000908152604090205481565b6101b260035481565b6101b260045481565b600654600754610164565b61016461021e366004611145565b6103d0565b61022b6104ab565b005b6101b2600381565b6101b2610243366004611145565b60096020526000908152604090205481565b6000546001600160a01b0316610191565b61022b610274366004611160565b6104bf565b61022b610287366004611179565b61064f565b61022b61029a36600461119b565b610819565b6101b260065481565b6101b26102b6366004611145565b600a6020526000908152604090205481565b6101b260075481565b600254610191906001600160a01b031681565b61022b610b04565b6101b26103e881565b6101b2610303366004611145565b6001600160a01b03166000908152600a602052604090205490565b61022b61032c366004611145565b610cb9565b600154600090819081906001600160a01b038681169116146103585760045460035461035f565b6003546004545b915091508160001480610370575080155b15610380576000925050506103ca565b60006103e86103906003826111e4565b61039a90876111f7565b6103a4919061120e565b90506103b08184611230565b6103ba83836111f7565b6103c4919061120e565b93505050505b92915050565b6000806005546000036103e857506000928392509050565b6005546001600160a01b0384166000908152600a6020526040812054909190610413906127106111f7565b61041d919061120e565b6001600160a01b038516600090815260086020526040902054600654919250906127109061044c9084906111f7565b610456919061120e565b61046091906111e4565b6001600160a01b038516600090815260096020526040902054600754919450906127109061048f9084906111f7565b610499919061120e565b6104a391906111e4565b915050915091565b6104b3610d32565b6104bd6000610d8c565b565b336000908152600a602052604090205481111561051c5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b60448201526064015b60405180910390fd5b60006005546003548361052f91906111f7565b610539919061120e565b905060006005546004548461054e91906111f7565b610558919061120e565b336000908152600a602052604081208054929350859290919061057c9084906111e4565b92505081905550826005600082825461059591906111e4565b9250508190555081600360008282546105ae91906111e4565b9250508190555080600460008282546105c791906111e4565b909155505081156105e9576001546105e9906001600160a01b03163384610ddc565b801561060657600254610606906001600160a01b03163383610ddc565b604080518381526020810183905290810184905233907f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d906060015b60405180910390a2505050565b6005548290829060000361068357600382905560048190556005829055336000908152600a60205260409020829055610788565b60006003546004548461069691906111f7565b6106a0919061120e565b90508381116106b1578091506106d2565b6000600454600354866106c491906111f7565b6106ce919061120e565b9350505b6000610711600354600554866106e891906111f7565b6106f2919061120e565b60045460055461070290876111f7565b61070c919061120e565b610e44565b336000908152600a6020526040812080549293508392909190610735908490611230565b92505081905550806005600082825461074e9190611230565b9250508190555083600360008282546107679190611230565b9250508190555082600460008282546107809190611230565b909155505050505b81156107a6576001546107a6906001600160a01b0316333085610e5c565b80156107c4576002546107c4906001600160a01b0316333084610e5c565b336000818152600a60209081526040918290205482518681529182018590528183015290517f64b83944e79c3ce8d4c297411de637c3e102d064677aac0c163976ebdcd6f50e9181900360600190a250505050565b6001546001600160a01b038481169116148061084257506002546001600160a01b038481169116145b61087e5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b6044820152606401610513565b60015460009081906001600160a01b038681169116146108a3576004546003546108aa565b6003546004545b915091506000821180156108be5750600081115b6109035760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b6044820152606401610513565b60006103e86109136003826111e4565b61091d90876111f7565b610927919061120e565b9050600061093582876111e4565b905060006109438386611230565b61094d85856111f7565b610957919061120e565b9050858110156109a95760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e740000000000006044820152606401610513565b6001546001600160a01b0390811690891603610a3c576001546109d7906001600160a01b031633308a610e5c565b81600660008282546109e99190611230565b925050819055508260036000828254610a029190611230565b925050819055508060046000828254610a1b91906111e4565b9091555050600254610a37906001600160a01b03163383610ddc565b610ab4565b600254610a54906001600160a01b031633308a610e5c565b8160076000828254610a669190611230565b925050819055508260046000828254610a7f9190611230565b925050819055508060036000828254610a9891906111e4565b9091555050600154610ab4906001600160a01b03163383610ddc565b60408051888152602081018390526001600160a01b038a169133917fa078c4190abe07940190effc1846be0ccf03ad6007bc9e93f9697d0b460befbb910160405180910390a35050505050505050565b336000908152600a6020526040902054610b585760405162461bcd60e51b81526020600482015260156024820152742737903634b8bab4b234ba3c903837b9b4ba34b7b760591b6044820152606401610513565b600554336000908152600a6020526040812054909190610b7a906127106111f7565b610b84919061120e565b33600090815260086020526040812054600654929350909161271090610bab9085906111f7565b610bb5919061120e565b610bbf91906111e4565b33600090815260096020526040812054600754929350909161271090610be69086906111f7565b610bf0919061120e565b610bfa91906111e4565b33600090815260086020526040812080549293508492909190610c1e908490611230565b90915550503360009081526009602052604081208054839290610c42908490611230565b90915550508115610c6457600154610c64906001600160a01b03163384610ddc565b8015610c8157600254610c81906001600160a01b03163383610ddc565b604080518381526020810183905233917f1ac537f0ad67b64ac68a04587ff3a4cb6977de22eb2c37ee560897a92c6d07c79101610642565b610cc1610d32565b6001600160a01b038116610d265760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610513565b610d2f81610d8c565b50565b6000546001600160a01b031633146104bd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610513565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038316602482015260448101829052610e3f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610e9a565b505050565b6000818310610e535781610e55565b825b9392505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e949085906323b872dd60e01b90608401610e08565b50505050565b6000610eef826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f6f9092919063ffffffff16565b9050805160001480610f10575080806020019051810190610f109190611243565b610e3f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610513565b6060610f7e8484600085610f86565b949350505050565b606082471015610fe75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610513565b600080866001600160a01b031685876040516110039190611289565b60006040518083038185875af1925050503d8060008114611040576040519150601f19603f3d011682016040523d82523d6000602084013e611045565b606091505b509150915061105687838387611061565b979650505050505050565b606083156110d05782516000036110c9576001600160a01b0385163b6110c95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610513565b5081610f7e565b610f7e83838151156110e55781518083602001fd5b8060405162461bcd60e51b815260040161051391906112a5565b80356001600160a01b038116811461111657600080fd5b919050565b6000806040838503121561112e57600080fd5b611137836110ff565b946020939093013593505050565b60006020828403121561115757600080fd5b610e55826110ff565b60006020828403121561117257600080fd5b5035919050565b6000806040838503121561118c57600080fd5b50508035926020909101359150565b6000806000606084860312156111b057600080fd5b6111b9846110ff565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156103ca576103ca6111ce565b80820281158282048414176103ca576103ca6111ce565b60008261122b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156103ca576103ca6111ce565b60006020828403121561125557600080fd5b81518015158114610e5557600080fd5b60005b83811015611280578181015183820152602001611268565b50506000910152565b6000825161129b818460208701611265565b9190910192915050565b60208152600082518060208401526112c4816040850160208701611265565b601f01601f1916919091016040019291505056fea2646970667358221220d8a8b149e8efc183c6fa2522c3c254416e789634832a2a1c568d224790ec0cfc64736f6c63430008130033a264697066735822122051df8173d2da286cdcd7dad4e924bffe66d3a63b560c9f60e0b6659a96a9ba1964736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100eb578063c9c65396146100fc578063e6a439051461010f578063f2fde38b1461014357600080fd5b80631e3dd18b1461008d5780633d9e2edb146100bd578063574f2ba3146100d0578063715018a6146100e1575b600080fd5b6100a061009b366004610544565b610156565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a06100cb366004610544565b610180565b6002546040519081526020016100b4565b6100e96101b0565b005b6000546001600160a01b03166100a0565b6100a061010a366004610579565b6101c4565b6100a061011d366004610579565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6100e96101513660046105ac565b610414565b6002818154811061016657600080fd5b6000918252602090912001546001600160a01b0316905081565b600060028281548110610195576101956105ce565b6000918252602090912001546001600160a01b031692915050565b6101b861048d565b6101c260006104e7565b565b60006001600160a01b038316158015906101e657506001600160a01b03821615155b61022f5760405162461bcd60e51b8152602060048201526015602482015274496e76616c696420746f6b656e206164647265737360581b60448201526064015b60405180910390fd5b816001600160a01b0316836001600160a01b0316036102905760405162461bcd60e51b815260206004820152601860248201527f546f6b656e73206d75737420626520646966666572656e7400000000000000006044820152606401610226565b6001600160a01b038381166000908152600160209081526040808320868516845290915290205416156102fb5760405162461bcd60e51b81526020600482015260136024820152725061697220616c72656164792065786973747360681b6044820152606401610226565b6000838360405161030b90610537565b6001600160a01b03928316815291166020820152604001604051809103906000f08015801561033e573d6000803e3d6000fd5b506001600160a01b0385811660008181526001602081815260408084208a871680865290835281852080546001600160a01b0319908116988a1698891790915584845282862087875284528286208054821689179055600280549586018155958690527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90940180549094168717909355925483519586529085015293955085945090917f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35092915050565b61041c61048d565b6001600160a01b0381166104815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610226565b61048a816104e7565b50565b6000546001600160a01b031633146101c25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610226565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611428806105e583390190565b60006020828403121561055657600080fd5b5035919050565b80356001600160a01b038116811461057457600080fd5b919050565b6000806040838503121561058c57600080fd5b6105958361055d565b91506105a36020840161055d565b90509250929050565b6000602082840312156105be57600080fd5b6105c78261055d565b9392505050565b634e487b7160e01b600052603260045260246000fdfe608060405234801561001057600080fd5b506040516200142838038062001428833981016040819052610031916100d7565b61003a3361006b565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905561010a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100d257600080fd5b919050565b600080604083850312156100ea57600080fd5b6100f3836100bb565b9150610101602084016100bb565b90509250929050565b61130e806200011a6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638da5cb5b116100c3578063c68f368c1161007c578063c68f368c146102c8578063d21220a7146102d1578063d294f093146102e4578063d73792a9146102ec578063dbbdd935146102f5578063f2fde38b1461031e57600080fd5b80638da5cb5b146102555780639c8f9f23146102665780639cd441da146102795780639f1d0f591461028c578063b02cb8de1461029f578063b8c876b1146102a857600080fd5b80635a76f25e116101155780635a76f25e146101fc5780635df45a37146102055780636a6f66e614610210578063715018a614610223578063768aebde1461022d5780638ba601181461023557600080fd5b80630902f1ac1461015d5780630dfe16811461017e57806315770f92146101a95780631befa6db146101c0578063274f8127146101d3578063443cb4bc146101f3575b600080fd5b6003546004545b604080519283526020830191909152015b60405180910390f35b600154610191906001600160a01b031681565b6040516001600160a01b039091168152602001610175565b6101b260055481565b604051908152602001610175565b6101b26101ce36600461111b565b610331565b6101b26101e1366004611145565b60086020526000908152604090205481565b6101b260035481565b6101b260045481565b600654600754610164565b61016461021e366004611145565b6103d0565b61022b6104ab565b005b6101b2600381565b6101b2610243366004611145565b60096020526000908152604090205481565b6000546001600160a01b0316610191565b61022b610274366004611160565b6104bf565b61022b610287366004611179565b61064f565b61022b61029a36600461119b565b610819565b6101b260065481565b6101b26102b6366004611145565b600a6020526000908152604090205481565b6101b260075481565b600254610191906001600160a01b031681565b61022b610b04565b6101b26103e881565b6101b2610303366004611145565b6001600160a01b03166000908152600a602052604090205490565b61022b61032c366004611145565b610cb9565b600154600090819081906001600160a01b038681169116146103585760045460035461035f565b6003546004545b915091508160001480610370575080155b15610380576000925050506103ca565b60006103e86103906003826111e4565b61039a90876111f7565b6103a4919061120e565b90506103b08184611230565b6103ba83836111f7565b6103c4919061120e565b93505050505b92915050565b6000806005546000036103e857506000928392509050565b6005546001600160a01b0384166000908152600a6020526040812054909190610413906127106111f7565b61041d919061120e565b6001600160a01b038516600090815260086020526040902054600654919250906127109061044c9084906111f7565b610456919061120e565b61046091906111e4565b6001600160a01b038516600090815260096020526040902054600754919450906127109061048f9084906111f7565b610499919061120e565b6104a391906111e4565b915050915091565b6104b3610d32565b6104bd6000610d8c565b565b336000908152600a602052604090205481111561051c5760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b60448201526064015b60405180910390fd5b60006005546003548361052f91906111f7565b610539919061120e565b905060006005546004548461054e91906111f7565b610558919061120e565b336000908152600a602052604081208054929350859290919061057c9084906111e4565b92505081905550826005600082825461059591906111e4565b9250508190555081600360008282546105ae91906111e4565b9250508190555080600460008282546105c791906111e4565b909155505081156105e9576001546105e9906001600160a01b03163384610ddc565b801561060657600254610606906001600160a01b03163383610ddc565b604080518381526020810183905290810184905233907f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d906060015b60405180910390a2505050565b6005548290829060000361068357600382905560048190556005829055336000908152600a60205260409020829055610788565b60006003546004548461069691906111f7565b6106a0919061120e565b90508381116106b1578091506106d2565b6000600454600354866106c491906111f7565b6106ce919061120e565b9350505b6000610711600354600554866106e891906111f7565b6106f2919061120e565b60045460055461070290876111f7565b61070c919061120e565b610e44565b336000908152600a6020526040812080549293508392909190610735908490611230565b92505081905550806005600082825461074e9190611230565b9250508190555083600360008282546107679190611230565b9250508190555082600460008282546107809190611230565b909155505050505b81156107a6576001546107a6906001600160a01b0316333085610e5c565b80156107c4576002546107c4906001600160a01b0316333084610e5c565b336000818152600a60209081526040918290205482518681529182018590528183015290517f64b83944e79c3ce8d4c297411de637c3e102d064677aac0c163976ebdcd6f50e9181900360600190a250505050565b6001546001600160a01b038481169116148061084257506002546001600160a01b038481169116145b61087e5760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b2103a37b5b2b760991b6044820152606401610513565b60015460009081906001600160a01b038681169116146108a3576004546003546108aa565b6003546004545b915091506000821180156108be5750600081115b6109035760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b6044820152606401610513565b60006103e86109136003826111e4565b61091d90876111f7565b610927919061120e565b9050600061093582876111e4565b905060006109438386611230565b61094d85856111f7565b610957919061120e565b9050858110156109a95760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e74206f757470757420616d6f756e740000000000006044820152606401610513565b6001546001600160a01b0390811690891603610a3c576001546109d7906001600160a01b031633308a610e5c565b81600660008282546109e99190611230565b925050819055508260036000828254610a029190611230565b925050819055508060046000828254610a1b91906111e4565b9091555050600254610a37906001600160a01b03163383610ddc565b610ab4565b600254610a54906001600160a01b031633308a610e5c565b8160076000828254610a669190611230565b925050819055508260046000828254610a7f9190611230565b925050819055508060036000828254610a9891906111e4565b9091555050600154610ab4906001600160a01b03163383610ddc565b60408051888152602081018390526001600160a01b038a169133917fa078c4190abe07940190effc1846be0ccf03ad6007bc9e93f9697d0b460befbb910160405180910390a35050505050505050565b336000908152600a6020526040902054610b585760405162461bcd60e51b81526020600482015260156024820152742737903634b8bab4b234ba3c903837b9b4ba34b7b760591b6044820152606401610513565b600554336000908152600a6020526040812054909190610b7a906127106111f7565b610b84919061120e565b33600090815260086020526040812054600654929350909161271090610bab9085906111f7565b610bb5919061120e565b610bbf91906111e4565b33600090815260096020526040812054600754929350909161271090610be69086906111f7565b610bf0919061120e565b610bfa91906111e4565b33600090815260086020526040812080549293508492909190610c1e908490611230565b90915550503360009081526009602052604081208054839290610c42908490611230565b90915550508115610c6457600154610c64906001600160a01b03163384610ddc565b8015610c8157600254610c81906001600160a01b03163383610ddc565b604080518381526020810183905233917f1ac537f0ad67b64ac68a04587ff3a4cb6977de22eb2c37ee560897a92c6d07c79101610642565b610cc1610d32565b6001600160a01b038116610d265760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610513565b610d2f81610d8c565b50565b6000546001600160a01b031633146104bd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610513565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b038316602482015260448101829052610e3f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610e9a565b505050565b6000818310610e535781610e55565b825b9392505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e949085906323b872dd60e01b90608401610e08565b50505050565b6000610eef826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f6f9092919063ffffffff16565b9050805160001480610f10575080806020019051810190610f109190611243565b610e3f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610513565b6060610f7e8484600085610f86565b949350505050565b606082471015610fe75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610513565b600080866001600160a01b031685876040516110039190611289565b60006040518083038185875af1925050503d8060008114611040576040519150601f19603f3d011682016040523d82523d6000602084013e611045565b606091505b509150915061105687838387611061565b979650505050505050565b606083156110d05782516000036110c9576001600160a01b0385163b6110c95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610513565b5081610f7e565b610f7e83838151156110e55781518083602001fd5b8060405162461bcd60e51b815260040161051391906112a5565b80356001600160a01b038116811461111657600080fd5b919050565b6000806040838503121561112e57600080fd5b611137836110ff565b946020939093013593505050565b60006020828403121561115757600080fd5b610e55826110ff565b60006020828403121561117257600080fd5b5035919050565b6000806040838503121561118c57600080fd5b50508035926020909101359150565b6000806000606084860312156111b057600080fd5b6111b9846110ff565b95602085013595506040909401359392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156103ca576103ca6111ce565b80820281158282048414176103ca576103ca6111ce565b60008261122b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156103ca576103ca6111ce565b60006020828403121561125557600080fd5b81518015158114610e5557600080fd5b60005b83811015611280578181015183820152602001611268565b50506000910152565b6000825161129b818460208701611265565b9190910192915050565b60208152600082518060208401526112c4816040850160208701611265565b601f01601f1916919091016040019291505056fea2646970667358221220d8a8b149e8efc183c6fa2522c3c254416e789634832a2a1c568d224790ec0cfc64736f6c63430008130033a264697066735822122051df8173d2da286cdcd7dad4e924bffe66d3a63b560c9f60e0b6659a96a9ba1964736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DEXFactory.sol:DEXFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1832,
        "contract": "contracts/DEXFactory.sol:DEXFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 1835,
        "contract": "contracts/DEXFactory.sol:DEXFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}